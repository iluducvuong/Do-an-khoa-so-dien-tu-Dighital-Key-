CCS PCM C Compiler, Version 5.025, 6995               22-May-20 16:19

               Filename:   F:\CCS\doankhoaso\khoaso.lst

               ROM used:   2526 words (31%)
                           Largest free fragment is 2048
               RAM used:   31 (8%) at main() level
                           45 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <khoaso.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  34
000A:  RETLW  37
000B:  RETLW  2A
000C:  RETLW  32
000D:  RETLW  35
000E:  RETLW  38
000F:  RETLW  30
0010:  RETLW  33
0011:  RETLW  36
0012:  RETLW  39
0013:  RETLW  23
0014:  RETLW  20
0015:  RETLW  20
0016:  RETLW  20
0017:  RETLW  20
0018:  DATA 41,2A
0019:  DATA 45,18
001A:  DATA 00,00
001B:  DATA 41,2A
001C:  DATA A6,19
001D:  DATA 00,01
001E:  DATA 41,2A
001F:  DATA AB,21
0020:  DATA D3,21
0021:  DATA D3,1E
0022:  DATA A2,23
0023:  DATA D3,26
0024:  DATA 22,00
0025:  DATA 41,2A
0026:  DATA AB,21
0027:  DATA CD,23
0028:  DATA C6,1E
0029:  DATA 31,00
002A:  DATA 41,2A
002B:  DATA AB,21
002C:  DATA CE,26
002D:  DATA C9,1E
002E:  DATA 32,16
002F:  DATA 31,16
0030:  DATA 30,16
0031:  DATA 30,16
0032:  DATA 30,00
0033:  DATA 4E,34
0034:  DATA 61,38
0035:  DATA A0,36
0036:  DATA 61,3A
0037:  DATA A0,35
0038:  DATA E8,30
0039:  DATA 75,1D
003A:  DATA 00,00
003B:  DATA 2A,00
003C:  DATA 2A,00
003D:  DATA 2A,00
003E:  DATA 2A,00
003F:  DATA 2A,00
0040:  DATA 2A,00
0041:  DATA C3,3A
0042:  DATA 61,10
0043:  DATA E4,30
0044:  DATA A0,36
0045:  DATA 6F,00
0046:  DATA CD,37
0047:  DATA 69,10
0048:  DATA F6,30
0049:  DATA EF,10
004A:  DATA 00,01
004B:  DATA CD,30
004C:  DATA 74,10
004D:  DATA 6B,34
004E:  DATA E1,3A
004F:  DATA A0,39
0050:  DATA E1,34
0051:  DATA 00,01
0052:  DATA CD,37
0053:  DATA 69,10
0054:  DATA E2,30
0055:  DATA 6E,10
0056:  DATA 6E,34
0057:  DATA 61,38
0058:  DATA 20,36
0059:  DATA E1,34
005A:  DATA 00,01
005B:  DATA 4E,34
005C:  DATA 61,38
005D:  DATA A0,36
005E:  DATA 61,3A
005F:  DATA A0,35
0060:  DATA E8,30
0061:  DATA 75,1D
0062:  DATA 00,01
0063:  DATA 20,00
0064:  DATA 20,00
0065:  DATA 20,00
0066:  DATA 20,00
0067:  DATA 20,00
0068:  DATA 20,00
0069:  DATA C3,3A
006A:  DATA 61,10
006B:  DATA E4,30
006C:  DATA 20,32
006D:  DATA 6F,37
006E:  DATA 67,00
006F:  DATA 4E,34
0070:  DATA 61,38
0071:  DATA A0,36
0072:  DATA 61,3A
0073:  DATA A0,35
0074:  DATA E8,30
0075:  DATA 75,1D
0076:  DATA 00,01
0077:  DATA CD,30
0078:  DATA 74,10
0079:  DATA 6B,34
007A:  DATA E1,3A
007B:  DATA A0,31
007C:  DATA 75,00
007D:  DATA CD,30
007E:  DATA 74,10
007F:  DATA 6B,34
0080:  DATA E1,3A
0081:  DATA A0,36
0082:  DATA EF,34
0083:  DATA 00,01
0084:  DATA CC,30
0085:  DATA EE,18
0086:  DATA 3A,00
0087:  DATA D3,30
0088:  DATA 69,10
0089:  DATA ED,30
008A:  DATA 74,10
008B:  DATA 6B,34
008C:  DATA E1,3A
008D:  DATA 00,01
008E:  DATA 4E,34
008F:  DATA 61,38
0090:  DATA A0,36
0091:  DATA 61,3A
0092:  DATA A0,35
0093:  DATA E8,30
0094:  DATA 75,00
0095:  DATA CD,30
0096:  DATA 74,10
0097:  DATA 6B,34
0098:  DATA E1,3A
0099:  DATA A0,36
009A:  DATA EF,34
009B:  DATA 00,01
009C:  DATA CC,30
009D:  DATA 6E,19
009E:  DATA 3A,00
009F:  DATA C4,37
00A0:  DATA 69,10
00A1:  DATA ED,30
00A2:  DATA 74,10
00A3:  DATA 6B,34
00A4:  DATA E1,3A
00A5:  DATA 00,01
00A6:  DATA 74,34
00A7:  DATA 61,37
00A8:  DATA 68,10
00A9:  DATA E3,37
00AA:  DATA EE,33
00AB:  DATA 00,01
00AC:  DATA 4E,34
00AD:  DATA 61,38
00AE:  DATA A0,36
00AF:  DATA 61,3A
00B0:  DATA A0,35
00B1:  DATA E8,30
00B2:  DATA 75,00
00B3:  DATA C4,37
00B4:  DATA 69,10
00B5:  DATA ED,30
00B6:  DATA 74,10
00B7:  DATA 6B,34
00B8:  DATA E1,3A
00B9:  DATA 00,01
00BA:  DATA 74,34
00BB:  DATA 61,3A
00BC:  DATA 20,31
00BD:  DATA E1,34
00BE:  DATA 00,01
00BF:  DATA 4E,34
00C0:  DATA 61,38
00C1:  DATA A0,36
00C2:  DATA 61,3A
00C3:  DATA A0,35
00C4:  DATA E8,30
00C5:  DATA 75,00
*
021D:  MOVF   0B,W
021E:  MOVWF  3A
021F:  BCF    0B.7
0220:  BSF    03.5
0221:  BSF    03.6
0222:  BSF    0C.7
0223:  BSF    0C.0
0224:  NOP
0225:  NOP
0226:  BCF    03.5
0227:  BCF    03.6
0228:  BTFSC  3A.7
0229:  BSF    0B.7
022A:  BSF    03.6
022B:  MOVF   0C,W
022C:  ANDLW  7F
022D:  BTFSC  03.2
022E:  GOTO   271
022F:  BCF    03.6
0230:  MOVWF  3A
0231:  BSF    03.6
0232:  MOVF   0D,W
0233:  BCF    03.6
0234:  MOVWF  3B
0235:  BSF    03.6
0236:  MOVF   0F,W
0237:  BCF    03.6
0238:  MOVWF  3C
0239:  MOVF   3A,W
023A:  MOVWF  3D
023B:  CALL   1F1
023C:  MOVF   3B,W
023D:  BSF    03.6
023E:  MOVWF  0D
023F:  BCF    03.6
0240:  MOVF   3C,W
0241:  BSF    03.6
0242:  MOVWF  0F
0243:  BCF    03.6
0244:  MOVF   0B,W
0245:  MOVWF  3D
0246:  BCF    0B.7
0247:  BSF    03.5
0248:  BSF    03.6
0249:  BSF    0C.7
024A:  BSF    0C.0
024B:  NOP
024C:  NOP
024D:  BCF    03.5
024E:  BCF    03.6
024F:  BTFSC  3D.7
0250:  BSF    0B.7
0251:  BSF    03.6
0252:  RLF    0C,W
0253:  RLF    0E,W
0254:  ANDLW  7F
0255:  BTFSC  03.2
0256:  GOTO   271
0257:  BCF    03.6
0258:  MOVWF  3A
0259:  BSF    03.6
025A:  MOVF   0D,W
025B:  BCF    03.6
025C:  MOVWF  3B
025D:  BSF    03.6
025E:  MOVF   0F,W
025F:  BCF    03.6
0260:  MOVWF  3C
0261:  MOVF   3A,W
0262:  MOVWF  3D
0263:  CALL   1F1
0264:  MOVF   3B,W
0265:  BSF    03.6
0266:  MOVWF  0D
0267:  BCF    03.6
0268:  MOVF   3C,W
0269:  BSF    03.6
026A:  MOVWF  0F
026B:  INCF   0D,F
026C:  BTFSC  03.2
026D:  INCF   0F,F
026E:  BCF    03.6
026F:  GOTO   21D
0270:  BSF    03.6
0271:  BCF    03.6
0272:  RETURN
*
02F6:  MOVF   0B,W
02F7:  MOVWF  3A
02F8:  BCF    0B.7
02F9:  BSF    03.5
02FA:  BSF    03.6
02FB:  BSF    0C.7
02FC:  BSF    0C.0
02FD:  NOP
02FE:  NOP
02FF:  BCF    03.5
0300:  BCF    03.6
0301:  BTFSC  3A.7
0302:  BSF    0B.7
0303:  BSF    03.6
0304:  MOVF   0C,W
0305:  ANDLW  7F
0306:  BTFSC  03.2
0307:  GOTO   34C
0308:  BCF    03.6
0309:  MOVWF  3A
030A:  BSF    03.6
030B:  MOVF   0D,W
030C:  BCF    03.6
030D:  MOVWF  3B
030E:  BSF    03.6
030F:  MOVF   0F,W
0310:  BCF    03.6
0311:  MOVWF  3C
0312:  MOVF   3A,W
0313:  BTFSS  0C.4
0314:  GOTO   313
0315:  MOVWF  19
0316:  MOVF   3B,W
0317:  BSF    03.6
0318:  MOVWF  0D
0319:  BCF    03.6
031A:  MOVF   3C,W
031B:  BSF    03.6
031C:  MOVWF  0F
031D:  BCF    03.6
031E:  MOVF   0B,W
031F:  MOVWF  3D
0320:  BCF    0B.7
0321:  BSF    03.5
0322:  BSF    03.6
0323:  BSF    0C.7
0324:  BSF    0C.0
0325:  NOP
0326:  NOP
0327:  BCF    03.5
0328:  BCF    03.6
0329:  BTFSC  3D.7
032A:  BSF    0B.7
032B:  BSF    03.6
032C:  RLF    0C,W
032D:  RLF    0E,W
032E:  ANDLW  7F
032F:  BTFSC  03.2
0330:  GOTO   34C
0331:  BCF    03.6
0332:  MOVWF  3A
0333:  BSF    03.6
0334:  MOVF   0D,W
0335:  BCF    03.6
0336:  MOVWF  3B
0337:  BSF    03.6
0338:  MOVF   0F,W
0339:  BCF    03.6
033A:  MOVWF  3C
033B:  MOVF   3A,W
033C:  BTFSS  0C.4
033D:  GOTO   33C
033E:  MOVWF  19
033F:  MOVF   3B,W
0340:  BSF    03.6
0341:  MOVWF  0D
0342:  BCF    03.6
0343:  MOVF   3C,W
0344:  BSF    03.6
0345:  MOVWF  0F
0346:  INCF   0D,F
0347:  BTFSC  03.2
0348:  INCF   0F,F
0349:  BCF    03.6
034A:  GOTO   2F6
034B:  BSF    03.6
034C:  BCF    03.6
034D:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
....................  
....................  
.................... #use delay(clock=20000000) 
*
00C6:  MOVLW  3F
00C7:  MOVWF  04
00C8:  BCF    03.7
00C9:  MOVF   00,W
00CA:  BTFSC  03.2
00CB:  GOTO   0D9
00CC:  MOVLW  06
00CD:  MOVWF  78
00CE:  CLRF   77
00CF:  DECFSZ 77,F
00D0:  GOTO   0CF
00D1:  DECFSZ 78,F
00D2:  GOTO   0CE
00D3:  MOVLW  7B
00D4:  MOVWF  77
00D5:  DECFSZ 77,F
00D6:  GOTO   0D5
00D7:  DECFSZ 00,F
00D8:  GOTO   0CC
00D9:  RETURN
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7,stream=GSM) 
.................... #define sensor PIN_C0 
.................... #define LCD_ENABLE_PIN  PIN_D5                        
.................... #define LCD_RS_PIN PIN_D6  
.................... #define LCD_RW_PIN PIN_D7 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0143:  BSF    06.4
....................    output_float(LCD_DATA5); 
0144:  BSF    06.5
....................    output_float(LCD_DATA6); 
0145:  BSF    06.6
....................    output_float(LCD_DATA7); 
0146:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0147:  BCF    03.5
0148:  BSF    08.7
0149:  BSF    03.5
014A:  BCF    08.7
....................    delay_cycles(1); 
014B:  NOP
....................    lcd_output_enable(1); 
014C:  BCF    03.5
014D:  BSF    08.5
014E:  BSF    03.5
014F:  BCF    08.5
....................    delay_cycles(1); 
0150:  NOP
....................    high = lcd_read_nibble(); 
0151:  BCF    03.5
0152:  CALL   10A
0153:  MOVF   78,W
0154:  MOVWF  45
....................        
....................    lcd_output_enable(0); 
0155:  BCF    08.5
0156:  BSF    03.5
0157:  BCF    08.5
....................    delay_cycles(1); 
0158:  NOP
....................    lcd_output_enable(1); 
0159:  BCF    03.5
015A:  BSF    08.5
015B:  BSF    03.5
015C:  BCF    08.5
....................    delay_us(1); 
015D:  GOTO   15E
015E:  GOTO   15F
015F:  NOP
....................    low = lcd_read_nibble(); 
0160:  BCF    03.5
0161:  CALL   10A
0162:  MOVF   78,W
0163:  MOVWF  44
....................        
....................    lcd_output_enable(0); 
0164:  BCF    08.5
0165:  BSF    03.5
0166:  BCF    08.5
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0167:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0168:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0169:  BCF    06.6
....................    output_drive(LCD_DATA7); 
016A:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
016B:  BCF    03.5
016C:  SWAPF  45,W
016D:  MOVWF  77
016E:  MOVLW  F0
016F:  ANDWF  77,F
0170:  MOVF   77,W
0171:  IORWF  44,W
0172:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
010A:  CLRF   46
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
010B:  BSF    03.5
010C:  BSF    06.4
010D:  MOVLW  00
010E:  BCF    03.5
010F:  BTFSC  06.4
0110:  MOVLW  01
0111:  IORWF  46,F
....................    n |= input(LCD_DATA5) << 1; 
0112:  BSF    03.5
0113:  BSF    06.5
0114:  MOVLW  00
0115:  BCF    03.5
0116:  BTFSC  06.5
0117:  MOVLW  01
0118:  MOVWF  77
0119:  BCF    03.0
011A:  RLF    77,F
011B:  MOVF   77,W
011C:  IORWF  46,F
....................    n |= input(LCD_DATA6) << 2; 
011D:  BSF    03.5
011E:  BSF    06.6
011F:  MOVLW  00
0120:  BCF    03.5
0121:  BTFSC  06.6
0122:  MOVLW  01
0123:  MOVWF  77
0124:  RLF    77,F
0125:  RLF    77,F
0126:  MOVLW  FC
0127:  ANDWF  77,F
0128:  MOVF   77,W
0129:  IORWF  46,F
....................    n |= input(LCD_DATA7) << 3; 
012A:  BSF    03.5
012B:  BSF    06.7
012C:  MOVLW  00
012D:  BCF    03.5
012E:  BTFSC  06.7
012F:  MOVLW  01
0130:  MOVWF  77
0131:  RLF    77,F
0132:  RLF    77,F
0133:  RLF    77,F
0134:  MOVLW  F8
0135:  ANDWF  77,F
0136:  MOVF   77,W
0137:  IORWF  46,F
....................     
....................    return(n); 
0138:  MOVF   46,W
0139:  MOVWF  78
....................   #else 
013A:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00DA:  BTFSC  45.0
00DB:  GOTO   0DE
00DC:  BCF    06.4
00DD:  GOTO   0DF
00DE:  BSF    06.4
00DF:  BSF    03.5
00E0:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00E1:  BCF    03.5
00E2:  BTFSC  45.1
00E3:  GOTO   0E6
00E4:  BCF    06.5
00E5:  GOTO   0E7
00E6:  BSF    06.5
00E7:  BSF    03.5
00E8:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00E9:  BCF    03.5
00EA:  BTFSC  45.2
00EB:  GOTO   0EE
00EC:  BCF    06.6
00ED:  GOTO   0EF
00EE:  BSF    06.6
00EF:  BSF    03.5
00F0:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00F1:  BCF    03.5
00F2:  BTFSC  45.3
00F3:  GOTO   0F6
00F4:  BCF    06.7
00F5:  GOTO   0F7
00F6:  BSF    06.7
00F7:  BSF    03.5
00F8:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00F9:  NOP
....................    lcd_output_enable(1); 
00FA:  BCF    03.5
00FB:  BSF    08.5
00FC:  BSF    03.5
00FD:  BCF    08.5
....................    delay_us(2); 
00FE:  MOVLW  02
00FF:  MOVWF  77
0100:  DECFSZ 77,F
0101:  GOTO   100
0102:  GOTO   103
0103:  NOP
....................    lcd_output_enable(0); 
0104:  BCF    03.5
0105:  BCF    08.5
0106:  BSF    03.5
0107:  BCF    08.5
0108:  BCF    03.5
0109:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
013B:  BSF    03.5
013C:  BCF    08.5
....................    lcd_rs_tris(); 
013D:  BCF    08.6
....................    lcd_rw_tris(); 
013E:  BCF    08.7
....................   #endif 
....................  
....................    lcd_output_rs(0); 
013F:  BCF    03.5
0140:  BCF    08.6
0141:  BSF    03.5
0142:  BCF    08.6
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0173:  MOVF   78,W
0174:  MOVWF  44
0175:  BTFSS  44.7
0176:  GOTO   179
0177:  BSF    03.5
0178:  GOTO   143
....................    lcd_output_rs(address); 
0179:  MOVF   42,F
017A:  BTFSS  03.2
017B:  GOTO   17E
017C:  BCF    08.6
017D:  GOTO   17F
017E:  BSF    08.6
017F:  BSF    03.5
0180:  BCF    08.6
....................    delay_cycles(1); 
0181:  NOP
....................    lcd_output_rw(0); 
0182:  BCF    03.5
0183:  BCF    08.7
0184:  BSF    03.5
0185:  BCF    08.7
....................    delay_cycles(1); 
0186:  NOP
....................    lcd_output_enable(0); 
0187:  BCF    03.5
0188:  BCF    08.5
0189:  BSF    03.5
018A:  BCF    08.5
....................    lcd_send_nibble(n >> 4); 
018B:  BCF    03.5
018C:  SWAPF  43,W
018D:  MOVWF  44
018E:  MOVLW  0F
018F:  ANDWF  44,F
0190:  MOVF   44,W
0191:  MOVWF  45
0192:  CALL   0DA
....................    lcd_send_nibble(n & 0xf); 
0193:  MOVF   43,W
0194:  ANDLW  0F
0195:  MOVWF  44
0196:  MOVWF  45
0197:  CALL   0DA
0198:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0199:  MOVLW  28
019A:  MOVWF  3B
019B:  MOVLW  0C
019C:  MOVWF  3C
019D:  MOVLW  01
019E:  MOVWF  3D
019F:  MOVLW  06
01A0:  MOVWF  3E
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01A1:  BCF    08.5
01A2:  BSF    03.5
01A3:  BCF    08.5
....................    lcd_output_rs(0); 
01A4:  BCF    03.5
01A5:  BCF    08.6
01A6:  BSF    03.5
01A7:  BCF    08.6
....................    lcd_output_rw(0); 
01A8:  BCF    03.5
01A9:  BCF    08.7
01AA:  BSF    03.5
01AB:  BCF    08.7
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01AC:  BCF    06.4
....................    output_drive(LCD_DATA5); 
01AD:  BCF    06.5
....................    output_drive(LCD_DATA6); 
01AE:  BCF    06.6
....................    output_drive(LCD_DATA7); 
01AF:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01B0:  BCF    08.5
....................    lcd_rs_tris(); 
01B1:  BCF    08.6
....................    lcd_rw_tris(); 
01B2:  BCF    08.7
....................  #endif 
....................      
....................    delay_ms(15); 
01B3:  MOVLW  0F
01B4:  BCF    03.5
01B5:  MOVWF  3F
01B6:  CALL   0C6
....................    for(i=1;i<=3;++i) 
01B7:  MOVLW  01
01B8:  MOVWF  3A
01B9:  MOVF   3A,W
01BA:  SUBLW  03
01BB:  BTFSS  03.0
01BC:  GOTO   1C5
....................    { 
....................        lcd_send_nibble(3); 
01BD:  MOVLW  03
01BE:  MOVWF  45
01BF:  CALL   0DA
....................        delay_ms(5); 
01C0:  MOVLW  05
01C1:  MOVWF  3F
01C2:  CALL   0C6
01C3:  INCF   3A,F
01C4:  GOTO   1B9
....................    } 
....................     
....................    lcd_send_nibble(2); 
01C5:  MOVLW  02
01C6:  MOVWF  45
01C7:  CALL   0DA
....................    delay_ms(5); 
01C8:  MOVLW  05
01C9:  MOVWF  3F
01CA:  CALL   0C6
....................    for(i=0;i<=3;++i) 
01CB:  CLRF   3A
01CC:  MOVF   3A,W
01CD:  SUBLW  03
01CE:  BTFSS  03.0
01CF:  GOTO   1DC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01D0:  MOVLW  3B
01D1:  ADDWF  3A,W
01D2:  MOVWF  04
01D3:  BCF    03.7
01D4:  MOVF   00,W
01D5:  MOVWF  3F
01D6:  CLRF   42
01D7:  MOVF   3F,W
01D8:  MOVWF  43
01D9:  CALL   13B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01DA:  INCF   3A,F
01DB:  GOTO   1CC
01DC:  BSF    0A.3
01DD:  BCF    0A.4
01DE:  GOTO   02F (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
01DF:  DECFSZ 3F,W
01E0:  GOTO   1E2
01E1:  GOTO   1E5
....................       address=LCD_LINE_TWO; 
01E2:  MOVLW  40
01E3:  MOVWF  40
01E4:  GOTO   1E6
....................    else 
....................       address=0; 
01E5:  CLRF   40
....................       
....................    address+=x-1; 
01E6:  MOVLW  01
01E7:  SUBWF  3E,W
01E8:  ADDWF  40,F
....................    lcd_send_byte(0,0x80|address); 
01E9:  MOVF   40,W
01EA:  IORLW  80
01EB:  MOVWF  41
01EC:  CLRF   42
01ED:  MOVF   41,W
01EE:  MOVWF  43
01EF:  CALL   13B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01F0:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01F1:  MOVF   3D,W
01F2:  XORLW  07
01F3:  BTFSC  03.2
01F4:  GOTO   1FF
01F5:  XORLW  0B
01F6:  BTFSC  03.2
01F7:  GOTO   204
01F8:  XORLW  06
01F9:  BTFSC  03.2
01FA:  GOTO   20C
01FB:  XORLW  02
01FC:  BTFSC  03.2
01FD:  GOTO   212
01FE:  GOTO   217
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01FF:  MOVLW  01
0200:  MOVWF  3E
0201:  MOVWF  3F
0202:  CALL   1DF
0203:  GOTO   21C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0204:  CLRF   42
0205:  MOVLW  01
0206:  MOVWF  43
0207:  CALL   13B
....................                      delay_ms(2); 
0208:  MOVLW  02
0209:  MOVWF  3F
020A:  CALL   0C6
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
020B:  GOTO   21C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
020C:  MOVLW  01
020D:  MOVWF  3E
020E:  MOVLW  02
020F:  MOVWF  3F
0210:  CALL   1DF
0211:  GOTO   21C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0212:  CLRF   42
0213:  MOVLW  10
0214:  MOVWF  43
0215:  CALL   13B
0216:  GOTO   21C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0217:  MOVLW  01
0218:  MOVWF  42
0219:  MOVF   3D,W
021A:  MOVWF  43
021B:  CALL   13B
....................      #endif 
....................    } 
021C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... const char key[16] ={'1', '4', '7', '*','2', '5', '8', '0','3', '6', '9', '#',' ', ' ', ' ', ' '}; 
.................... void quetcot(unsigned char col) 
.................... { 
....................         output_high(pin_a0); 
*
027D:  BSF    03.5
027E:  BCF    05.0
027F:  BCF    03.5
0280:  BSF    05.0
....................         output_high(pin_a1); 
0281:  BSF    03.5
0282:  BCF    05.1
0283:  BCF    03.5
0284:  BSF    05.1
....................         output_high(pin_a2); 
0285:  BSF    03.5
0286:  BCF    05.2
0287:  BCF    03.5
0288:  BSF    05.2
....................         output_high(pin_a3); 
0289:  BSF    03.5
028A:  BCF    05.3
028B:  BCF    03.5
028C:  BSF    05.3
....................         output_high(pin_a4); 
028D:  BSF    03.5
028E:  BCF    05.4
028F:  BCF    03.5
0290:  BSF    05.4
....................         output_high(pin_a5); 
0291:  BSF    03.5
0292:  BCF    05.5
0293:  BCF    03.5
0294:  BSF    05.5
....................         output_high(pin_e0); 
0295:  BSF    03.5
0296:  BCF    09.0
0297:  BCF    03.5
0298:  BSF    09.0
....................         output_high(pin_e1); 
0299:  BSF    03.5
029A:  BCF    09.1
029B:  BCF    03.5
029C:  BSF    09.1
....................         if(col==0)output_low(pin_a4); 
029D:  MOVF   3C,F
029E:  BTFSS  03.2
029F:  GOTO   2A4
02A0:  BSF    03.5
02A1:  BCF    05.4
02A2:  BCF    03.5
02A3:  BCF    05.4
....................         if(col==1)output_low(pin_a5); 
02A4:  DECFSZ 3C,W
02A5:  GOTO   2AA
02A6:  BSF    03.5
02A7:  BCF    05.5
02A8:  BCF    03.5
02A9:  BCF    05.5
....................         if(col==2)output_low(pin_e0); 
02AA:  MOVF   3C,W
02AB:  SUBLW  02
02AC:  BTFSS  03.2
02AD:  GOTO   2B2
02AE:  BSF    03.5
02AF:  BCF    09.0
02B0:  BCF    03.5
02B1:  BCF    09.0
....................         if(col==3)output_low(pin_e1); 
02B2:  MOVF   3C,W
02B3:  SUBLW  03
02B4:  BTFSS  03.2
02B5:  GOTO   2BA
02B6:  BSF    03.5
02B7:  BCF    09.1
02B8:  BCF    03.5
02B9:  BCF    09.1
.................... } 
.................... unsigned char quetphim() 
*
0273:  CLRF   3A
0274:  MOVLW  FF
0275:  MOVWF  3B
.................... {  
....................   unsigned char c=0,r=0xFF; 
....................   for (c=0;c<4;c++) 
0276:  CLRF   3A
0277:  MOVF   3A,W
0278:  SUBLW  03
0279:  BTFSS  03.0
027A:  GOTO   2F1
....................   { 
....................    quetcot(c); 
027B:  MOVF   3A,W
027C:  MOVWF  3C
....................    while (input(pin_a3)==0) r=c*4+0; 
*
02BA:  BSF    03.5
02BB:  BSF    05.3
02BC:  BCF    03.5
02BD:  BTFSC  05.3
02BE:  GOTO   2C5
02BF:  RLF    3A,W
02C0:  MOVWF  3B
02C1:  RLF    3B,F
02C2:  MOVLW  FC
02C3:  ANDWF  3B,F
02C4:  GOTO   2BA
....................    while (input(pin_a2)==0) r=c*4+1; 
02C5:  BSF    03.5
02C6:  BSF    05.2
02C7:  BCF    03.5
02C8:  BTFSC  05.2
02C9:  GOTO   2D3
02CA:  RLF    3A,W
02CB:  MOVWF  77
02CC:  RLF    77,F
02CD:  MOVLW  FC
02CE:  ANDWF  77,F
02CF:  MOVF   77,W
02D0:  ADDLW  01
02D1:  MOVWF  3B
02D2:  GOTO   2C5
....................    while (input(pin_a1)==0) r=c*4+2; 
02D3:  BSF    03.5
02D4:  BSF    05.1
02D5:  BCF    03.5
02D6:  BTFSC  05.1
02D7:  GOTO   2E1
02D8:  RLF    3A,W
02D9:  MOVWF  77
02DA:  RLF    77,F
02DB:  MOVLW  FC
02DC:  ANDWF  77,F
02DD:  MOVF   77,W
02DE:  ADDLW  02
02DF:  MOVWF  3B
02E0:  GOTO   2D3
....................    while (input(pin_a0)==0) r=c*4+3; 
02E1:  BSF    03.5
02E2:  BSF    05.0
02E3:  BCF    03.5
02E4:  BTFSC  05.0
02E5:  GOTO   2EF
02E6:  RLF    3A,W
02E7:  MOVWF  77
02E8:  RLF    77,F
02E9:  MOVLW  FC
02EA:  ANDWF  77,F
02EB:  MOVF   77,W
02EC:  ADDLW  03
02ED:  MOVWF  3B
02EE:  GOTO   2E1
02EF:  INCF   3A,F
02F0:  GOTO   277
....................   } 
....................   return r; 
02F1:  MOVF   3B,W
02F2:  MOVWF  78
02F3:  BSF    0A.3
02F4:  BCF    0A.4
02F5:  GOTO   041 (RETURN)
.................... } 
.................... void khoitao() 
.................... { 
....................    output_high(pin_c5); 
*
034E:  BCF    20.5
034F:  MOVF   20,W
0350:  BSF    03.5
0351:  MOVWF  07
0352:  BCF    03.5
0353:  BSF    07.5
....................    printf("AT"); 
0354:  MOVLW  41
0355:  BTFSS  0C.4
0356:  GOTO   355
0357:  MOVWF  19
0358:  MOVLW  54
0359:  BTFSS  0C.4
035A:  GOTO   359
035B:  MOVWF  19
....................    putc(13); 
035C:  MOVLW  0D
035D:  BTFSS  0C.4
035E:  GOTO   35D
035F:  MOVWF  19
....................    delay_ms(500); 
0360:  MOVLW  02
0361:  MOVWF  3A
0362:  MOVLW  FA
0363:  MOVWF  3F
0364:  CALL   0C6
0365:  DECFSZ 3A,F
0366:  GOTO   362
....................    printf("ATE0"); 
0367:  MOVLW  18
0368:  BSF    03.6
0369:  MOVWF  0D
036A:  MOVLW  00
036B:  MOVWF  0F
036C:  BCF    03.6
036D:  CALL   2F6
....................    putc(13); 
036E:  MOVLW  0D
036F:  BTFSS  0C.4
0370:  GOTO   36F
0371:  MOVWF  19
....................    delay_ms(500); 
0372:  MOVLW  02
0373:  MOVWF  3A
0374:  MOVLW  FA
0375:  MOVWF  3F
0376:  CALL   0C6
0377:  DECFSZ 3A,F
0378:  GOTO   374
....................    printf("AT&3"); 
0379:  MOVLW  1B
037A:  BSF    03.6
037B:  MOVWF  0D
037C:  MOVLW  00
037D:  MOVWF  0F
037E:  BCF    03.6
037F:  CALL   2F6
....................    putc(13); 
0380:  MOVLW  0D
0381:  BTFSS  0C.4
0382:  GOTO   381
0383:  MOVWF  19
....................    delay_ms(500);    
0384:  MOVLW  02
0385:  MOVWF  3A
0386:  MOVLW  FA
0387:  MOVWF  3F
0388:  CALL   0C6
0389:  DECFSZ 3A,F
038A:  GOTO   386
....................    printf("AT+CSCS=\"GSM\""); 
038B:  MOVLW  1E
038C:  BSF    03.6
038D:  MOVWF  0D
038E:  MOVLW  00
038F:  MOVWF  0F
0390:  BCF    03.6
0391:  CALL   2F6
....................    putc(13); 
0392:  MOVLW  0D
0393:  BTFSS  0C.4
0394:  GOTO   393
0395:  MOVWF  19
....................    delay_ms(500); 
0396:  MOVLW  02
0397:  MOVWF  3A
0398:  MOVLW  FA
0399:  MOVWF  3F
039A:  CALL   0C6
039B:  DECFSZ 3A,F
039C:  GOTO   398
....................    printf("AT+CMGF=1"); 
039D:  MOVLW  25
039E:  BSF    03.6
039F:  MOVWF  0D
03A0:  MOVLW  00
03A1:  MOVWF  0F
03A2:  BCF    03.6
03A3:  CALL   2F6
....................    putc(13); 
03A4:  MOVLW  0D
03A5:  BTFSS  0C.4
03A6:  GOTO   3A5
03A7:  MOVWF  19
....................    delay_ms(500); 
03A8:  MOVLW  02
03A9:  MOVWF  3A
03AA:  MOVLW  FA
03AB:  MOVWF  3F
03AC:  CALL   0C6
03AD:  DECFSZ 3A,F
03AE:  GOTO   3AA
....................    printf("AT+CNMI=2,1,0,0,0"); 
03AF:  MOVLW  2A
03B0:  BSF    03.6
03B1:  MOVWF  0D
03B2:  MOVLW  00
03B3:  MOVWF  0F
03B4:  BCF    03.6
03B5:  CALL   2F6
....................    putc(13); 
03B6:  MOVLW  0D
03B7:  BTFSS  0C.4
03B8:  GOTO   3B7
03B9:  MOVWF  19
....................    delay_ms(500); 
03BA:  MOVLW  02
03BB:  MOVWF  3A
03BC:  MOVLW  FA
03BD:  MOVWF  3F
03BE:  CALL   0C6
03BF:  DECFSZ 3A,F
03C0:  GOTO   3BC
03C1:  BSF    0A.3
03C2:  BCF    0A.4
03C3:  GOTO   305 (RETURN)
.................... } 
.................... void baodong() 
.................... { 
....................    printf("ATD%c%c%c%c%c%c%c%c%c%c;",read_eeprom(0x10),read_eeprom(0x11),read_eeprom(0x12),read_eeprom(0x13),read_eeprom(0x14),read_eeprom(0x15),read_eeprom(0x16),read_eeprom(0x17),read_eeprom(0x18),read_eeprom(0x19)); 
03C4:  MOVLW  10
03C5:  BSF    03.6
03C6:  MOVWF  0D
03C7:  BSF    03.5
03C8:  BCF    0C.7
03C9:  BSF    0C.0
03CA:  BCF    03.5
03CB:  MOVF   0C,W
03CC:  BCF    03.6
03CD:  MOVWF  3A
03CE:  MOVLW  11
03CF:  BSF    03.6
03D0:  MOVWF  0D
03D1:  BSF    03.5
03D2:  BCF    0C.7
03D3:  BSF    0C.0
03D4:  BCF    03.5
03D5:  MOVF   0C,W
03D6:  BCF    03.6
03D7:  MOVWF  3B
03D8:  MOVLW  12
03D9:  BSF    03.6
03DA:  MOVWF  0D
03DB:  BSF    03.5
03DC:  BCF    0C.7
03DD:  BSF    0C.0
03DE:  BCF    03.5
03DF:  MOVF   0C,W
03E0:  BCF    03.6
03E1:  MOVWF  3C
03E2:  MOVLW  13
03E3:  BSF    03.6
03E4:  MOVWF  0D
03E5:  BSF    03.5
03E6:  BCF    0C.7
03E7:  BSF    0C.0
03E8:  BCF    03.5
03E9:  MOVF   0C,W
03EA:  BCF    03.6
03EB:  MOVWF  3D
03EC:  MOVLW  14
03ED:  BSF    03.6
03EE:  MOVWF  0D
03EF:  BSF    03.5
03F0:  BCF    0C.7
03F1:  BSF    0C.0
03F2:  BCF    03.5
03F3:  MOVF   0C,W
03F4:  BCF    03.6
03F5:  MOVWF  3E
03F6:  MOVLW  15
03F7:  BSF    03.6
03F8:  MOVWF  0D
03F9:  BSF    03.5
03FA:  BCF    0C.7
03FB:  BSF    0C.0
03FC:  BCF    03.5
03FD:  MOVF   0C,W
03FE:  BCF    03.6
03FF:  MOVWF  3F
0400:  MOVLW  16
0401:  BSF    03.6
0402:  MOVWF  0D
0403:  BSF    03.5
0404:  BCF    0C.7
0405:  BSF    0C.0
0406:  BCF    03.5
0407:  MOVF   0C,W
0408:  BCF    03.6
0409:  MOVWF  40
040A:  MOVLW  17
040B:  BSF    03.6
040C:  MOVWF  0D
040D:  BSF    03.5
040E:  BCF    0C.7
040F:  BSF    0C.0
0410:  BCF    03.5
0411:  MOVF   0C,W
0412:  BCF    03.6
0413:  MOVWF  41
0414:  MOVLW  18
0415:  BSF    03.6
0416:  MOVWF  0D
0417:  BSF    03.5
0418:  BCF    0C.7
0419:  BSF    0C.0
041A:  BCF    03.5
041B:  MOVF   0C,W
041C:  BCF    03.6
041D:  MOVWF  42
041E:  MOVLW  19
041F:  BSF    03.6
0420:  MOVWF  0D
0421:  BSF    03.5
0422:  BCF    0C.7
0423:  BSF    0C.0
0424:  BCF    03.5
0425:  MOVF   0C,W
0426:  BCF    03.6
0427:  MOVWF  43
0428:  MOVLW  41
0429:  BTFSS  0C.4
042A:  GOTO   429
042B:  MOVWF  19
042C:  MOVLW  54
042D:  BTFSS  0C.4
042E:  GOTO   42D
042F:  MOVWF  19
0430:  MOVLW  44
0431:  BTFSS  0C.4
0432:  GOTO   431
0433:  MOVWF  19
0434:  MOVF   3A,W
0435:  BTFSS  0C.4
0436:  GOTO   435
0437:  MOVWF  19
0438:  MOVF   3B,W
0439:  BTFSS  0C.4
043A:  GOTO   439
043B:  MOVWF  19
043C:  MOVF   3C,W
043D:  BTFSS  0C.4
043E:  GOTO   43D
043F:  MOVWF  19
0440:  MOVF   3D,W
0441:  BTFSS  0C.4
0442:  GOTO   441
0443:  MOVWF  19
0444:  MOVF   3E,W
0445:  BTFSS  0C.4
0446:  GOTO   445
0447:  MOVWF  19
0448:  MOVF   3F,W
0449:  BTFSS  0C.4
044A:  GOTO   449
044B:  MOVWF  19
044C:  MOVF   40,W
044D:  BTFSS  0C.4
044E:  GOTO   44D
044F:  MOVWF  19
0450:  MOVF   41,W
0451:  BTFSS  0C.4
0452:  GOTO   451
0453:  MOVWF  19
0454:  MOVF   42,W
0455:  BTFSS  0C.4
0456:  GOTO   455
0457:  MOVWF  19
0458:  MOVF   43,W
0459:  BTFSS  0C.4
045A:  GOTO   459
045B:  MOVWF  19
045C:  MOVLW  3B
045D:  BTFSS  0C.4
045E:  GOTO   45D
045F:  MOVWF  19
....................    putc(13); 
0460:  MOVLW  0D
0461:  BTFSS  0C.4
0462:  GOTO   461
0463:  MOVWF  19
....................    delay_ms(15000); 
0464:  MOVLW  3C
0465:  MOVWF  3A
0466:  MOVLW  FA
0467:  MOVWF  3F
0468:  CALL   0C6
0469:  DECFSZ 3A,F
046A:  GOTO   466
....................    printf("ATH"); 
046B:  MOVLW  41
046C:  BTFSS  0C.4
046D:  GOTO   46C
046E:  MOVWF  19
046F:  MOVLW  54
0470:  BTFSS  0C.4
0471:  GOTO   470
0472:  MOVWF  19
0473:  MOVLW  48
0474:  BTFSS  0C.4
0475:  GOTO   474
0476:  MOVWF  19
....................    putc(13); 
0477:  MOVLW  0D
0478:  BTFSS  0C.4
0479:  GOTO   478
047A:  MOVWF  19
....................    output_low(pin_c5); 
047B:  BCF    20.5
047C:  MOVF   20,W
047D:  BSF    03.5
047E:  MOVWF  07
047F:  BCF    03.5
0480:  BCF    07.5
....................    delay_ms(5000); 
0481:  MOVLW  14
0482:  MOVWF  3A
0483:  MOVLW  FA
0484:  MOVWF  3F
0485:  CALL   0C6
0486:  DECFSZ 3A,F
0487:  GOTO   483
0488:  BSF    0A.3
0489:  BCF    0A.4
048A:  GOTO   308 (RETURN)
.................... } 
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  81
0804:  BSF    03.5
0805:  MOVWF  19
0806:  MOVLW  A6
0807:  MOVWF  18
0808:  MOVLW  90
0809:  BCF    03.5
080A:  MOVWF  18
080B:  MOVLW  FF
080C:  MOVWF  20
080D:  BSF    03.5
080E:  BSF    1F.0
080F:  BSF    1F.1
0810:  BSF    1F.2
0811:  BCF    1F.3
0812:  MOVLW  07
0813:  MOVWF  1C
0814:  BCF    03.7
0815:  BCF    03.5
0816:  CLRF   21
0817:  CLRF   22
0818:  CLRF   23
0819:  CLRF   24
081A:  CLRF   25
.................... { 
....................    int a=0,sai=0,count=0,dmk=0,solan=0; 
....................    char mk[6]={},new1[6]={},new2[6]={}; 
081B:  CLRF   26
081C:  CLRF   27
081D:  CLRF   28
081E:  CLRF   29
081F:  CLRF   2A
0820:  CLRF   2B
0821:  CLRF   2C
0822:  CLRF   2D
0823:  CLRF   2E
0824:  CLRF   2F
0825:  CLRF   30
0826:  CLRF   31
0827:  CLRF   32
0828:  CLRF   33
0829:  CLRF   34
082A:  CLRF   35
082B:  CLRF   36
082C:  CLRF   37
....................    unsigned char phim; 
....................    /*for(int i=0;i<=5;i++) 
....................    {       
....................       write_eeprom(0x00+i,0x31+i); 
....................    } 
....................    write_eeprom(0x010,0x30); 
....................    write_eeprom(0x011,0x39); 
....................    write_eeprom(0x012,0x32); 
....................    write_eeprom(0x013,0x33); 
....................    write_eeprom(0x014,0x35); 
....................    write_eeprom(0x015,0x30); 
....................    write_eeprom(0x016,0x30); 
....................    write_eeprom(0x017,0x38); 
....................    write_eeprom(0x018,0x33); 
....................    write_eeprom(0x019,0x33);*/ 
....................    lcd_init(); 
082D:  BCF    0A.3
082E:  GOTO   199
082F:  BSF    0A.3
....................    lcd_putc("Nhap mat khau:"); 
0830:  MOVLW  33
0831:  BSF    03.6
0832:  MOVWF  0D
0833:  MOVLW  00
0834:  MOVWF  0F
0835:  BCF    0A.3
0836:  BCF    03.6
0837:  CALL   21D
0838:  BSF    0A.3
....................    while(TRUE) 
....................    { 
....................       output_high(pin_c4); 
0839:  BCF    20.4
083A:  MOVF   20,W
083B:  BSF    03.5
083C:  MOVWF  07
083D:  BCF    03.5
083E:  BSF    07.4
....................       phim=quetphim(); 
083F:  BCF    0A.3
0840:  GOTO   273
0841:  BSF    0A.3
0842:  MOVF   78,W
0843:  MOVWF  38
....................       if(phim!=0xFF && phim!=12 && phim!=13 && phim!=14 && phim!=15) 
0844:  INCFSZ 38,W
0845:  GOTO   047
0846:  GOTO   1A1
0847:  MOVF   38,W
0848:  SUBLW  0C
0849:  BTFSC  03.2
084A:  GOTO   1A1
084B:  MOVF   38,W
084C:  SUBLW  0D
084D:  BTFSC  03.2
084E:  GOTO   1A1
084F:  MOVF   38,W
0850:  SUBLW  0E
0851:  BTFSC  03.2
0852:  GOTO   1A1
0853:  MOVF   38,W
0854:  SUBLW  0F
0855:  BTFSC  03.2
0856:  GOTO   1A1
....................       { 
....................        delay_ms(5); 
0857:  MOVLW  05
0858:  MOVWF  3F
0859:  BCF    0A.3
085A:  CALL   0C6
085B:  BSF    0A.3
....................        if(phim!=0xFF && phim!=12 && phim!=13 && phim!=14 && phim!=15) 
085C:  INCFSZ 38,W
085D:  GOTO   05F
085E:  GOTO   1A1
085F:  MOVF   38,W
0860:  SUBLW  0C
0861:  BTFSC  03.2
0862:  GOTO   1A1
0863:  MOVF   38,W
0864:  SUBLW  0D
0865:  BTFSC  03.2
0866:  GOTO   1A1
0867:  MOVF   38,W
0868:  SUBLW  0E
0869:  BTFSC  03.2
086A:  GOTO   1A1
086B:  MOVF   38,W
086C:  SUBLW  0F
086D:  BTFSC  03.2
086E:  GOTO   1A1
....................        { 
....................           if (a==0) 
086F:  MOVF   21,F
0870:  BTFSS  03.2
0871:  GOTO   0A1
....................           { 
....................             mk[0]=key[phim]; 
0872:  MOVF   38,W
0873:  BCF    0A.3
0874:  CALL   004
0875:  BSF    0A.3
0876:  MOVWF  78
0877:  MOVWF  26
....................             lcd_gotoxy(6,2); 
0878:  MOVLW  06
0879:  MOVWF  3E
087A:  MOVLW  02
087B:  MOVWF  3F
087C:  BCF    0A.3
087D:  CALL   1DF
087E:  BSF    0A.3
....................             printf(lcd_putc,"%c",key[phim]); 
087F:  MOVF   38,W
0880:  BCF    0A.3
0881:  CALL   004
0882:  BSF    0A.3
0883:  MOVWF  3A
0884:  MOVWF  3D
0885:  BCF    0A.3
0886:  CALL   1F1
0887:  BSF    0A.3
....................             delay_ms(300); 
0888:  MOVLW  02
0889:  MOVWF  3A
088A:  MOVLW  96
088B:  MOVWF  3F
088C:  BCF    0A.3
088D:  CALL   0C6
088E:  BSF    0A.3
088F:  DECFSZ 3A,F
0890:  GOTO   08A
....................             lcd_gotoxy(6,2); 
0891:  MOVLW  06
0892:  MOVWF  3E
0893:  MOVLW  02
0894:  MOVWF  3F
0895:  BCF    0A.3
0896:  CALL   1DF
0897:  BSF    0A.3
....................             lcd_putc("*"); 
0898:  MOVLW  3B
0899:  BSF    03.6
089A:  MOVWF  0D
089B:  MOVLW  00
089C:  MOVWF  0F
089D:  BCF    0A.3
089E:  BCF    03.6
089F:  CALL   21D
08A0:  BSF    0A.3
....................           } 
....................           if (a==1) 
08A1:  DECFSZ 21,W
08A2:  GOTO   0D2
....................           { 
....................             mk[1]=key[phim]; 
08A3:  MOVF   38,W
08A4:  BCF    0A.3
08A5:  CALL   004
08A6:  BSF    0A.3
08A7:  MOVWF  78
08A8:  MOVWF  27
....................             lcd_gotoxy(7,2); 
08A9:  MOVLW  07
08AA:  MOVWF  3E
08AB:  MOVLW  02
08AC:  MOVWF  3F
08AD:  BCF    0A.3
08AE:  CALL   1DF
08AF:  BSF    0A.3
....................             printf(lcd_putc,"%c",key[phim]); 
08B0:  MOVF   38,W
08B1:  BCF    0A.3
08B2:  CALL   004
08B3:  BSF    0A.3
08B4:  MOVWF  3A
08B5:  MOVWF  3D
08B6:  BCF    0A.3
08B7:  CALL   1F1
08B8:  BSF    0A.3
....................             delay_ms(300); 
08B9:  MOVLW  02
08BA:  MOVWF  3A
08BB:  MOVLW  96
08BC:  MOVWF  3F
08BD:  BCF    0A.3
08BE:  CALL   0C6
08BF:  BSF    0A.3
08C0:  DECFSZ 3A,F
08C1:  GOTO   0BB
....................             lcd_gotoxy(7,2); 
08C2:  MOVLW  07
08C3:  MOVWF  3E
08C4:  MOVLW  02
08C5:  MOVWF  3F
08C6:  BCF    0A.3
08C7:  CALL   1DF
08C8:  BSF    0A.3
....................             lcd_putc("*"); 
08C9:  MOVLW  3C
08CA:  BSF    03.6
08CB:  MOVWF  0D
08CC:  MOVLW  00
08CD:  MOVWF  0F
08CE:  BCF    0A.3
08CF:  BCF    03.6
08D0:  CALL   21D
08D1:  BSF    0A.3
....................           } 
....................           if (a==2) 
08D2:  MOVF   21,W
08D3:  SUBLW  02
08D4:  BTFSS  03.2
08D5:  GOTO   105
....................           { 
....................             mk[2]=key[phim]; 
08D6:  MOVF   38,W
08D7:  BCF    0A.3
08D8:  CALL   004
08D9:  BSF    0A.3
08DA:  MOVWF  78
08DB:  MOVWF  28
....................             lcd_gotoxy(8,2); 
08DC:  MOVLW  08
08DD:  MOVWF  3E
08DE:  MOVLW  02
08DF:  MOVWF  3F
08E0:  BCF    0A.3
08E1:  CALL   1DF
08E2:  BSF    0A.3
....................             printf(lcd_putc,"%c",key[phim]); 
08E3:  MOVF   38,W
08E4:  BCF    0A.3
08E5:  CALL   004
08E6:  BSF    0A.3
08E7:  MOVWF  3A
08E8:  MOVWF  3D
08E9:  BCF    0A.3
08EA:  CALL   1F1
08EB:  BSF    0A.3
....................             delay_ms(300); 
08EC:  MOVLW  02
08ED:  MOVWF  3A
08EE:  MOVLW  96
08EF:  MOVWF  3F
08F0:  BCF    0A.3
08F1:  CALL   0C6
08F2:  BSF    0A.3
08F3:  DECFSZ 3A,F
08F4:  GOTO   0EE
....................             lcd_gotoxy(8,2); 
08F5:  MOVLW  08
08F6:  MOVWF  3E
08F7:  MOVLW  02
08F8:  MOVWF  3F
08F9:  BCF    0A.3
08FA:  CALL   1DF
08FB:  BSF    0A.3
....................             lcd_putc("*"); 
08FC:  MOVLW  3D
08FD:  BSF    03.6
08FE:  MOVWF  0D
08FF:  MOVLW  00
0900:  MOVWF  0F
0901:  BCF    0A.3
0902:  BCF    03.6
0903:  CALL   21D
0904:  BSF    0A.3
....................           } 
....................           if (a==3) 
0905:  MOVF   21,W
0906:  SUBLW  03
0907:  BTFSS  03.2
0908:  GOTO   138
....................           { 
....................             mk[3]=key[phim]; 
0909:  MOVF   38,W
090A:  BCF    0A.3
090B:  CALL   004
090C:  BSF    0A.3
090D:  MOVWF  78
090E:  MOVWF  29
....................             lcd_gotoxy(9,2); 
090F:  MOVLW  09
0910:  MOVWF  3E
0911:  MOVLW  02
0912:  MOVWF  3F
0913:  BCF    0A.3
0914:  CALL   1DF
0915:  BSF    0A.3
....................             printf(lcd_putc,"%c",key[phim]); 
0916:  MOVF   38,W
0917:  BCF    0A.3
0918:  CALL   004
0919:  BSF    0A.3
091A:  MOVWF  3A
091B:  MOVWF  3D
091C:  BCF    0A.3
091D:  CALL   1F1
091E:  BSF    0A.3
....................             delay_ms(300); 
091F:  MOVLW  02
0920:  MOVWF  3A
0921:  MOVLW  96
0922:  MOVWF  3F
0923:  BCF    0A.3
0924:  CALL   0C6
0925:  BSF    0A.3
0926:  DECFSZ 3A,F
0927:  GOTO   121
....................             lcd_gotoxy(9,2); 
0928:  MOVLW  09
0929:  MOVWF  3E
092A:  MOVLW  02
092B:  MOVWF  3F
092C:  BCF    0A.3
092D:  CALL   1DF
092E:  BSF    0A.3
....................             lcd_putc("*"); 
092F:  MOVLW  3E
0930:  BSF    03.6
0931:  MOVWF  0D
0932:  MOVLW  00
0933:  MOVWF  0F
0934:  BCF    0A.3
0935:  BCF    03.6
0936:  CALL   21D
0937:  BSF    0A.3
....................           } 
....................           if (a==4) 
0938:  MOVF   21,W
0939:  SUBLW  04
093A:  BTFSS  03.2
093B:  GOTO   16B
....................           { 
....................             mk[4]=key[phim]; 
093C:  MOVF   38,W
093D:  BCF    0A.3
093E:  CALL   004
093F:  BSF    0A.3
0940:  MOVWF  78
0941:  MOVWF  2A
....................             lcd_gotoxy(10,2); 
0942:  MOVLW  0A
0943:  MOVWF  3E
0944:  MOVLW  02
0945:  MOVWF  3F
0946:  BCF    0A.3
0947:  CALL   1DF
0948:  BSF    0A.3
....................             printf(lcd_putc,"%c",key[phim]); 
0949:  MOVF   38,W
094A:  BCF    0A.3
094B:  CALL   004
094C:  BSF    0A.3
094D:  MOVWF  3A
094E:  MOVWF  3D
094F:  BCF    0A.3
0950:  CALL   1F1
0951:  BSF    0A.3
....................             delay_ms(300); 
0952:  MOVLW  02
0953:  MOVWF  3A
0954:  MOVLW  96
0955:  MOVWF  3F
0956:  BCF    0A.3
0957:  CALL   0C6
0958:  BSF    0A.3
0959:  DECFSZ 3A,F
095A:  GOTO   154
....................             lcd_gotoxy(10,2); 
095B:  MOVLW  0A
095C:  MOVWF  3E
095D:  MOVLW  02
095E:  MOVWF  3F
095F:  BCF    0A.3
0960:  CALL   1DF
0961:  BSF    0A.3
....................             lcd_putc("*"); 
0962:  MOVLW  3F
0963:  BSF    03.6
0964:  MOVWF  0D
0965:  MOVLW  00
0966:  MOVWF  0F
0967:  BCF    0A.3
0968:  BCF    03.6
0969:  CALL   21D
096A:  BSF    0A.3
....................           } 
....................           if (a==5) 
096B:  MOVF   21,W
096C:  SUBLW  05
096D:  BTFSS  03.2
096E:  GOTO   1A0
....................           { 
....................             mk[5]=key[phim]; 
096F:  MOVF   38,W
0970:  BCF    0A.3
0971:  CALL   004
0972:  BSF    0A.3
0973:  MOVWF  78
0974:  MOVWF  2B
....................             lcd_gotoxy(11,2); 
0975:  MOVLW  0B
0976:  MOVWF  3E
0977:  MOVLW  02
0978:  MOVWF  3F
0979:  BCF    0A.3
097A:  CALL   1DF
097B:  BSF    0A.3
....................             printf(lcd_putc,"%c",key[phim]); 
097C:  MOVF   38,W
097D:  BCF    0A.3
097E:  CALL   004
097F:  BSF    0A.3
0980:  MOVWF  3A
0981:  MOVWF  3D
0982:  BCF    0A.3
0983:  CALL   1F1
0984:  BSF    0A.3
....................             delay_ms(300); 
0985:  MOVLW  02
0986:  MOVWF  3A
0987:  MOVLW  96
0988:  MOVWF  3F
0989:  BCF    0A.3
098A:  CALL   0C6
098B:  BSF    0A.3
098C:  DECFSZ 3A,F
098D:  GOTO   187
....................             lcd_gotoxy(11,2); 
098E:  MOVLW  0B
098F:  MOVWF  3E
0990:  MOVLW  02
0991:  MOVWF  3F
0992:  BCF    0A.3
0993:  CALL   1DF
0994:  BSF    0A.3
....................             lcd_putc("*"); 
0995:  MOVLW  40
0996:  BSF    03.6
0997:  MOVWF  0D
0998:  MOVLW  00
0999:  MOVWF  0F
099A:  BCF    0A.3
099B:  BCF    03.6
099C:  CALL   21D
099D:  BSF    0A.3
....................             count=1; 
099E:  MOVLW  01
099F:  MOVWF  23
....................           } 
....................           a++; 
09A0:  INCF   21,F
....................       } 
....................       } 
....................    if (count==1 && phim==15 && dmk==0) 
09A1:  DECFSZ 23,W
09A2:  GOTO   26D
09A3:  MOVF   38,W
09A4:  SUBLW  0F
09A5:  BTFSS  03.2
09A6:  GOTO   26D
09A7:  MOVF   24,F
09A8:  BTFSS  03.2
09A9:  GOTO   26D
....................    { 
....................       delay_ms(5); 
09AA:  MOVLW  05
09AB:  MOVWF  3F
09AC:  BCF    0A.3
09AD:  CALL   0C6
09AE:  BSF    0A.3
....................       if(count==1 && phim==15 && dmk==0) 
09AF:  DECFSZ 23,W
09B0:  GOTO   26D
09B1:  MOVF   38,W
09B2:  SUBLW  0F
09B3:  BTFSS  03.2
09B4:  GOTO   26D
09B5:  MOVF   24,F
09B6:  BTFSS  03.2
09B7:  GOTO   26D
....................       { 
....................       if (mk[0]==read_eeprom(0x00) && mk[1]==read_eeprom(0x01) && mk[2]==read_eeprom(0x02) && mk[3]==read_eeprom(0x03) && mk[4]==read_eeprom(0x04) && mk[5]==read_eeprom(0x05)) 
09B8:  BSF    03.6
09B9:  CLRF   0D
09BA:  BSF    03.5
09BB:  BCF    0C.7
09BC:  BSF    0C.0
09BD:  BCF    03.5
09BE:  MOVF   0C,W
09BF:  BCF    03.6
09C0:  SUBWF  26,W
09C1:  BTFSS  03.2
09C2:  GOTO   235
09C3:  MOVLW  01
09C4:  BSF    03.6
09C5:  MOVWF  0D
09C6:  BSF    03.5
09C7:  BCF    0C.7
09C8:  BSF    0C.0
09C9:  BCF    03.5
09CA:  MOVF   0C,W
09CB:  BCF    03.6
09CC:  SUBWF  27,W
09CD:  BTFSS  03.2
09CE:  GOTO   235
09CF:  MOVLW  02
09D0:  BSF    03.6
09D1:  MOVWF  0D
09D2:  BSF    03.5
09D3:  BCF    0C.7
09D4:  BSF    0C.0
09D5:  BCF    03.5
09D6:  MOVF   0C,W
09D7:  BCF    03.6
09D8:  SUBWF  28,W
09D9:  BTFSS  03.2
09DA:  GOTO   235
09DB:  MOVLW  03
09DC:  BSF    03.6
09DD:  MOVWF  0D
09DE:  BSF    03.5
09DF:  BCF    0C.7
09E0:  BSF    0C.0
09E1:  BCF    03.5
09E2:  MOVF   0C,W
09E3:  BCF    03.6
09E4:  SUBWF  29,W
09E5:  BTFSS  03.2
09E6:  GOTO   235
09E7:  MOVLW  04
09E8:  BSF    03.6
09E9:  MOVWF  0D
09EA:  BSF    03.5
09EB:  BCF    0C.7
09EC:  BSF    0C.0
09ED:  BCF    03.5
09EE:  MOVF   0C,W
09EF:  BCF    03.6
09F0:  SUBWF  2A,W
09F1:  BTFSS  03.2
09F2:  GOTO   235
09F3:  MOVLW  05
09F4:  BSF    03.6
09F5:  MOVWF  0D
09F6:  BSF    03.5
09F7:  BCF    0C.7
09F8:  BSF    0C.0
09F9:  BCF    03.5
09FA:  MOVF   0C,W
09FB:  BCF    03.6
09FC:  SUBWF  2B,W
09FD:  BTFSS  03.2
09FE:  GOTO   235
....................       { 
....................          lcd_putc('\f'); 
09FF:  MOVLW  0C
0A00:  MOVWF  3D
0A01:  BCF    0A.3
0A02:  CALL   1F1
0A03:  BSF    0A.3
....................          lcd_putc("Cua da mo"); 
0A04:  MOVLW  41
0A05:  BSF    03.6
0A06:  MOVWF  0D
0A07:  MOVLW  00
0A08:  MOVWF  0F
0A09:  BCF    0A.3
0A0A:  BCF    03.6
0A0B:  CALL   21D
0A0C:  BSF    0A.3
....................          lcd_gotoxy(10,2); 
0A0D:  MOVLW  0A
0A0E:  MOVWF  3E
0A0F:  MOVLW  02
0A10:  MOVWF  3F
0A11:  BCF    0A.3
0A12:  CALL   1DF
0A13:  BSF    0A.3
....................          lcd_putc("Moi vao!"); 
0A14:  MOVLW  46
0A15:  BSF    03.6
0A16:  MOVWF  0D
0A17:  MOVLW  00
0A18:  MOVWF  0F
0A19:  BCF    0A.3
0A1A:  BCF    03.6
0A1B:  CALL   21D
0A1C:  BSF    0A.3
....................          output_high(pin_c3); 
0A1D:  BCF    20.3
0A1E:  MOVF   20,W
0A1F:  BSF    03.5
0A20:  MOVWF  07
0A21:  BCF    03.5
0A22:  BSF    07.3
....................          a=0; 
0A23:  CLRF   21
....................          delay_ms(2000); 
0A24:  MOVLW  08
0A25:  MOVWF  3A
0A26:  MOVLW  FA
0A27:  MOVWF  3F
0A28:  BCF    0A.3
0A29:  CALL   0C6
0A2A:  BSF    0A.3
0A2B:  DECFSZ 3A,F
0A2C:  GOTO   226
....................          output_low(pin_c3); 
0A2D:  BCF    20.3
0A2E:  MOVF   20,W
0A2F:  BSF    03.5
0A30:  MOVWF  07
0A31:  BCF    03.5
0A32:  BCF    07.3
....................          count=0; 
0A33:  CLRF   23
....................       } 
0A34:  GOTO   26D
....................       else 
....................       { 
....................          lcd_putc('\f'); 
0A35:  MOVLW  0C
0A36:  MOVWF  3D
0A37:  BCF    0A.3
0A38:  CALL   1F1
0A39:  BSF    0A.3
....................          lcd_putc("Mat khau sai"); 
0A3A:  MOVLW  4B
0A3B:  BSF    03.6
0A3C:  MOVWF  0D
0A3D:  MOVLW  00
0A3E:  MOVWF  0F
0A3F:  BCF    0A.3
0A40:  BCF    03.6
0A41:  CALL   21D
0A42:  BSF    0A.3
....................          lcd_gotoxy(1,2); 
0A43:  MOVLW  01
0A44:  MOVWF  3E
0A45:  MOVLW  02
0A46:  MOVWF  3F
0A47:  BCF    0A.3
0A48:  CALL   1DF
0A49:  BSF    0A.3
....................          lcd_putc("Moi ban nhap lai"); 
0A4A:  MOVLW  52
0A4B:  BSF    03.6
0A4C:  MOVWF  0D
0A4D:  MOVLW  00
0A4E:  MOVWF  0F
0A4F:  BCF    0A.3
0A50:  BCF    03.6
0A51:  CALL   21D
0A52:  BSF    0A.3
....................          delay_ms(2000); 
0A53:  MOVLW  08
0A54:  MOVWF  3A
0A55:  MOVLW  FA
0A56:  MOVWF  3F
0A57:  BCF    0A.3
0A58:  CALL   0C6
0A59:  BSF    0A.3
0A5A:  DECFSZ 3A,F
0A5B:  GOTO   255
....................          lcd_putc('\f'); 
0A5C:  MOVLW  0C
0A5D:  MOVWF  3D
0A5E:  BCF    0A.3
0A5F:  CALL   1F1
0A60:  BSF    0A.3
....................          lcd_putc("Nhap mat khau:"); 
0A61:  MOVLW  5B
0A62:  BSF    03.6
0A63:  MOVWF  0D
0A64:  MOVLW  00
0A65:  MOVWF  0F
0A66:  BCF    0A.3
0A67:  BCF    03.6
0A68:  CALL   21D
0A69:  BSF    0A.3
....................          a=0; 
0A6A:  CLRF   21
....................          count=0; 
0A6B:  CLRF   23
....................          sai++; 
0A6C:  INCF   22,F
....................       } 
....................       } 
....................    } 
....................    if(phim==12) 
0A6D:  MOVF   38,W
0A6E:  SUBLW  0C
0A6F:  BTFSS  03.2
0A70:  GOTO   2F7
....................    { 
....................       DELAY_MS(5); 
0A71:  MOVLW  05
0A72:  MOVWF  3F
0A73:  BCF    0A.3
0A74:  CALL   0C6
0A75:  BSF    0A.3
....................       if(phim==12) 
0A76:  MOVF   38,W
0A77:  SUBLW  0C
0A78:  BTFSS  03.2
0A79:  GOTO   2F7
....................       { 
....................          if(a==1) 
0A7A:  DECFSZ 21,W
0A7B:  GOTO   28D
....................          { 
....................             lcd_gotoxy(6,2); 
0A7C:  MOVLW  06
0A7D:  MOVWF  3E
0A7E:  MOVLW  02
0A7F:  MOVWF  3F
0A80:  BCF    0A.3
0A81:  CALL   1DF
0A82:  BSF    0A.3
....................             lcd_putc(" "); 
0A83:  MOVLW  63
0A84:  BSF    03.6
0A85:  MOVWF  0D
0A86:  MOVLW  00
0A87:  MOVWF  0F
0A88:  BCF    0A.3
0A89:  BCF    03.6
0A8A:  CALL   21D
0A8B:  BSF    0A.3
....................             a--; 
0A8C:  DECF   21,F
....................          } 
....................          if(a==2) 
0A8D:  MOVF   21,W
0A8E:  SUBLW  02
0A8F:  BTFSS  03.2
0A90:  GOTO   2A2
....................          { 
....................             lcd_gotoxy(7,2); 
0A91:  MOVLW  07
0A92:  MOVWF  3E
0A93:  MOVLW  02
0A94:  MOVWF  3F
0A95:  BCF    0A.3
0A96:  CALL   1DF
0A97:  BSF    0A.3
....................             lcd_putc(" "); 
0A98:  MOVLW  64
0A99:  BSF    03.6
0A9A:  MOVWF  0D
0A9B:  MOVLW  00
0A9C:  MOVWF  0F
0A9D:  BCF    0A.3
0A9E:  BCF    03.6
0A9F:  CALL   21D
0AA0:  BSF    0A.3
....................             a--; 
0AA1:  DECF   21,F
....................          } 
....................          if(a==3) 
0AA2:  MOVF   21,W
0AA3:  SUBLW  03
0AA4:  BTFSS  03.2
0AA5:  GOTO   2B7
....................          { 
....................             lcd_gotoxy(8,2); 
0AA6:  MOVLW  08
0AA7:  MOVWF  3E
0AA8:  MOVLW  02
0AA9:  MOVWF  3F
0AAA:  BCF    0A.3
0AAB:  CALL   1DF
0AAC:  BSF    0A.3
....................             lcd_putc(" "); 
0AAD:  MOVLW  65
0AAE:  BSF    03.6
0AAF:  MOVWF  0D
0AB0:  MOVLW  00
0AB1:  MOVWF  0F
0AB2:  BCF    0A.3
0AB3:  BCF    03.6
0AB4:  CALL   21D
0AB5:  BSF    0A.3
....................             a--; 
0AB6:  DECF   21,F
....................          } 
....................          if(a==4) 
0AB7:  MOVF   21,W
0AB8:  SUBLW  04
0AB9:  BTFSS  03.2
0ABA:  GOTO   2CC
....................          { 
....................             lcd_gotoxy(9,2); 
0ABB:  MOVLW  09
0ABC:  MOVWF  3E
0ABD:  MOVLW  02
0ABE:  MOVWF  3F
0ABF:  BCF    0A.3
0AC0:  CALL   1DF
0AC1:  BSF    0A.3
....................             lcd_putc(" "); 
0AC2:  MOVLW  66
0AC3:  BSF    03.6
0AC4:  MOVWF  0D
0AC5:  MOVLW  00
0AC6:  MOVWF  0F
0AC7:  BCF    0A.3
0AC8:  BCF    03.6
0AC9:  CALL   21D
0ACA:  BSF    0A.3
....................             a--; 
0ACB:  DECF   21,F
....................          } 
....................          if(a==5) 
0ACC:  MOVF   21,W
0ACD:  SUBLW  05
0ACE:  BTFSS  03.2
0ACF:  GOTO   2E1
....................          { 
....................             lcd_gotoxy(10,2); 
0AD0:  MOVLW  0A
0AD1:  MOVWF  3E
0AD2:  MOVLW  02
0AD3:  MOVWF  3F
0AD4:  BCF    0A.3
0AD5:  CALL   1DF
0AD6:  BSF    0A.3
....................             lcd_putc(" "); 
0AD7:  MOVLW  67
0AD8:  BSF    03.6
0AD9:  MOVWF  0D
0ADA:  MOVLW  00
0ADB:  MOVWF  0F
0ADC:  BCF    0A.3
0ADD:  BCF    03.6
0ADE:  CALL   21D
0ADF:  BSF    0A.3
....................             a--; 
0AE0:  DECF   21,F
....................          } 
....................          if(a>=6) 
0AE1:  MOVF   21,W
0AE2:  SUBLW  05
0AE3:  BTFSC  03.0
0AE4:  GOTO   2F7
....................          { 
....................             lcd_gotoxy(11,2); 
0AE5:  MOVLW  0B
0AE6:  MOVWF  3E
0AE7:  MOVLW  02
0AE8:  MOVWF  3F
0AE9:  BCF    0A.3
0AEA:  CALL   1DF
0AEB:  BSF    0A.3
....................             lcd_putc(" "); 
0AEC:  MOVLW  68
0AED:  BSF    03.6
0AEE:  MOVWF  0D
0AEF:  MOVLW  00
0AF0:  MOVWF  0F
0AF1:  BCF    0A.3
0AF2:  BCF    03.6
0AF3:  CALL   21D
0AF4:  BSF    0A.3
....................             a=5; 
0AF5:  MOVLW  05
0AF6:  MOVWF  21
....................          } 
....................           
....................       } 
....................    } 
....................    if (sai==5) 
0AF7:  MOVF   22,W
0AF8:  SUBLW  05
0AF9:  BTFSS  03.2
0AFA:  GOTO   310
....................    { 
....................       output_high(pin_c5); 
0AFB:  BCF    20.5
0AFC:  MOVF   20,W
0AFD:  BSF    03.5
0AFE:  MOVWF  07
0AFF:  BCF    03.5
0B00:  BSF    07.5
....................       a=0; 
0B01:  CLRF   21
....................       count=0; 
0B02:  CLRF   23
....................       khoitao(); 
0B03:  BCF    0A.3
0B04:  GOTO   34E
0B05:  BSF    0A.3
....................       baodong(); 
0B06:  BCF    0A.3
0B07:  GOTO   3C4
0B08:  BSF    0A.3
....................       sai=0; 
0B09:  CLRF   22
....................       output_low(pin_c5); 
0B0A:  BCF    20.5
0B0B:  MOVF   20,W
0B0C:  BSF    03.5
0B0D:  MOVWF  07
0B0E:  BCF    03.5
0B0F:  BCF    07.5
....................    } 
....................       if(phim==14) 
0B10:  MOVF   38,W
0B11:  SUBLW  0E
0B12:  BTFSS  03.2
0B13:  GOTO   350
....................       { 
....................          delay_ms(5); 
0B14:  MOVLW  05
0B15:  MOVWF  3F
0B16:  BCF    0A.3
0B17:  CALL   0C6
0B18:  BSF    0A.3
....................          if(phim==14) 
0B19:  MOVF   38,W
0B1A:  SUBLW  0E
0B1B:  BTFSS  03.2
0B1C:  GOTO   350
....................          { 
....................             output_high(pin_c2); 
0B1D:  BCF    20.2
0B1E:  MOVF   20,W
0B1F:  BSF    03.5
0B20:  MOVWF  07
0B21:  BCF    03.5
0B22:  BSF    07.2
....................             lcd_putc('\f'); 
0B23:  MOVLW  0C
0B24:  MOVWF  3D
0B25:  BCF    0A.3
0B26:  CALL   1F1
0B27:  BSF    0A.3
....................             lcd_putc("Cua da dong"); 
0B28:  MOVLW  69
0B29:  BSF    03.6
0B2A:  MOVWF  0D
0B2B:  MOVLW  00
0B2C:  MOVWF  0F
0B2D:  BCF    0A.3
0B2E:  BCF    03.6
0B2F:  CALL   21D
0B30:  BSF    0A.3
....................             delay_ms(2000); 
0B31:  MOVLW  08
0B32:  MOVWF  3A
0B33:  MOVLW  FA
0B34:  MOVWF  3F
0B35:  BCF    0A.3
0B36:  CALL   0C6
0B37:  BSF    0A.3
0B38:  DECFSZ 3A,F
0B39:  GOTO   333
....................             output_low(pin_c2); 
0B3A:  BCF    20.2
0B3B:  MOVF   20,W
0B3C:  BSF    03.5
0B3D:  MOVWF  07
0B3E:  BCF    03.5
0B3F:  BCF    07.2
....................             lcd_putc('\f'); 
0B40:  MOVLW  0C
0B41:  MOVWF  3D
0B42:  BCF    0A.3
0B43:  CALL   1F1
0B44:  BSF    0A.3
....................             lcd_putc("Nhap mat khau:"); 
0B45:  MOVLW  6F
0B46:  BSF    03.6
0B47:  MOVWF  0D
0B48:  MOVLW  00
0B49:  MOVWF  0F
0B4A:  BCF    0A.3
0B4B:  BCF    03.6
0B4C:  CALL   21D
0B4D:  BSF    0A.3
....................             a=0;count=0; 
0B4E:  CLRF   21
0B4F:  CLRF   23
....................          } 
....................       } 
....................       if(phim==13) 
0B50:  MOVF   38,W
0B51:  SUBLW  0D
0B52:  BTFSS  03.2
0B53:  GOTO   374
....................       { 
....................          delay_ms(5); 
0B54:  MOVLW  05
0B55:  MOVWF  3F
0B56:  BCF    0A.3
0B57:  CALL   0C6
0B58:  BSF    0A.3
....................          if(phim==13) 
0B59:  MOVF   38,W
0B5A:  SUBLW  0D
0B5B:  BTFSS  03.2
0B5C:  GOTO   374
....................          { 
....................             a=0; 
0B5D:  CLRF   21
....................             dmk=1; 
0B5E:  MOVLW  01
0B5F:  MOVWF  24
....................             lcd_putc('\f'); 
0B60:  MOVLW  0C
0B61:  MOVWF  3D
0B62:  BCF    0A.3
0B63:  CALL   1F1
0B64:  BSF    0A.3
....................             lcd_gotoxy(1,1); 
0B65:  MOVLW  01
0B66:  MOVWF  3E
0B67:  MOVWF  3F
0B68:  BCF    0A.3
0B69:  CALL   1DF
0B6A:  BSF    0A.3
....................             lcd_putc("Mat khau cu"); 
0B6B:  MOVLW  77
0B6C:  BSF    03.6
0B6D:  MOVWF  0D
0B6E:  MOVLW  00
0B6F:  MOVWF  0F
0B70:  BCF    0A.3
0B71:  BCF    03.6
0B72:  CALL   21D
0B73:  BSF    0A.3
....................          } 
....................       } 
....................       if(count==1 && dmk==1 && phim==15 && solan==0) 
0B74:  DECFSZ 23,W
0B75:  GOTO   427
0B76:  DECFSZ 24,W
0B77:  GOTO   427
0B78:  MOVF   38,W
0B79:  SUBLW  0F
0B7A:  BTFSS  03.2
0B7B:  GOTO   427
0B7C:  MOVF   25,F
0B7D:  BTFSS  03.2
0B7E:  GOTO   427
....................       { 
....................          delay_ms(5); 
0B7F:  MOVLW  05
0B80:  MOVWF  3F
0B81:  BCF    0A.3
0B82:  CALL   0C6
0B83:  BSF    0A.3
....................          if(count==1 && dmk==1 && phim==15 && solan==0) 
0B84:  DECFSZ 23,W
0B85:  GOTO   427
0B86:  DECFSZ 24,W
0B87:  GOTO   427
0B88:  MOVF   38,W
0B89:  SUBLW  0F
0B8A:  BTFSS  03.2
0B8B:  GOTO   427
0B8C:  MOVF   25,F
0B8D:  BTFSS  03.2
0B8E:  GOTO   427
....................          { 
....................          if (mk[0]==read_eeprom(0x00) && mk[1]==read_eeprom(0x01) && mk[2]==read_eeprom(0x02) && mk[3]==read_eeprom(0x03) && mk[4]==read_eeprom(0x04) && mk[5]==read_eeprom(0x05)) 
0B8F:  BSF    03.6
0B90:  CLRF   0D
0B91:  BSF    03.5
0B92:  BCF    0C.7
0B93:  BSF    0C.0
0B94:  BCF    03.5
0B95:  MOVF   0C,W
0B96:  BCF    03.6
0B97:  SUBWF  26,W
0B98:  BTFSS  03.2
0B99:  GOTO   3FF
0B9A:  MOVLW  01
0B9B:  BSF    03.6
0B9C:  MOVWF  0D
0B9D:  BSF    03.5
0B9E:  BCF    0C.7
0B9F:  BSF    0C.0
0BA0:  BCF    03.5
0BA1:  MOVF   0C,W
0BA2:  BCF    03.6
0BA3:  SUBWF  27,W
0BA4:  BTFSS  03.2
0BA5:  GOTO   3FF
0BA6:  MOVLW  02
0BA7:  BSF    03.6
0BA8:  MOVWF  0D
0BA9:  BSF    03.5
0BAA:  BCF    0C.7
0BAB:  BSF    0C.0
0BAC:  BCF    03.5
0BAD:  MOVF   0C,W
0BAE:  BCF    03.6
0BAF:  SUBWF  28,W
0BB0:  BTFSS  03.2
0BB1:  GOTO   3FF
0BB2:  MOVLW  03
0BB3:  BSF    03.6
0BB4:  MOVWF  0D
0BB5:  BSF    03.5
0BB6:  BCF    0C.7
0BB7:  BSF    0C.0
0BB8:  BCF    03.5
0BB9:  MOVF   0C,W
0BBA:  BCF    03.6
0BBB:  SUBWF  29,W
0BBC:  BTFSS  03.2
0BBD:  GOTO   3FF
0BBE:  MOVLW  04
0BBF:  BSF    03.6
0BC0:  MOVWF  0D
0BC1:  BSF    03.5
0BC2:  BCF    0C.7
0BC3:  BSF    0C.0
0BC4:  BCF    03.5
0BC5:  MOVF   0C,W
0BC6:  BCF    03.6
0BC7:  SUBWF  2A,W
0BC8:  BTFSS  03.2
0BC9:  GOTO   3FF
0BCA:  MOVLW  05
0BCB:  BSF    03.6
0BCC:  MOVWF  0D
0BCD:  BSF    03.5
0BCE:  BCF    0C.7
0BCF:  BSF    0C.0
0BD0:  BCF    03.5
0BD1:  MOVF   0C,W
0BD2:  BCF    03.6
0BD3:  SUBWF  2B,W
0BD4:  BTFSS  03.2
0BD5:  GOTO   3FF
....................          { 
....................             lcd_putc('\f'); 
0BD6:  MOVLW  0C
0BD7:  MOVWF  3D
0BD8:  BCF    0A.3
0BD9:  CALL   1F1
0BDA:  BSF    0A.3
....................             lcd_gotoxy(1,1); 
0BDB:  MOVLW  01
0BDC:  MOVWF  3E
0BDD:  MOVWF  3F
0BDE:  BCF    0A.3
0BDF:  CALL   1DF
0BE0:  BSF    0A.3
....................             lcd_putc("Mat khau moi"); 
0BE1:  MOVLW  7D
0BE2:  BSF    03.6
0BE3:  MOVWF  0D
0BE4:  MOVLW  00
0BE5:  MOVWF  0F
0BE6:  BCF    0A.3
0BE7:  BCF    03.6
0BE8:  CALL   21D
0BE9:  BSF    0A.3
....................             lcd_gotoxy(1,2); 
0BEA:  MOVLW  01
0BEB:  MOVWF  3E
0BEC:  MOVLW  02
0BED:  MOVWF  3F
0BEE:  BCF    0A.3
0BEF:  CALL   1DF
0BF0:  BSF    0A.3
....................             lcd_putc("Lan1:"); 
0BF1:  MOVLW  84
0BF2:  BSF    03.6
0BF3:  MOVWF  0D
0BF4:  MOVLW  00
0BF5:  MOVWF  0F
0BF6:  BCF    0A.3
0BF7:  BCF    03.6
0BF8:  CALL   21D
0BF9:  BSF    0A.3
....................             solan=1; 
0BFA:  MOVLW  01
0BFB:  MOVWF  25
....................             count=0; 
0BFC:  CLRF   23
....................             a=0; 
0BFD:  CLRF   21
....................          } 
0BFE:  GOTO   427
....................          else 
....................          { 
....................            lcd_putc('\f'); 
0BFF:  MOVLW  0C
0C00:  MOVWF  3D
0C01:  BCF    0A.3
0C02:  CALL   1F1
0C03:  BSF    0A.3
....................            lcd_putc("Sai mat khau"); 
0C04:  MOVLW  87
0C05:  BSF    03.6
0C06:  MOVWF  0D
0C07:  MOVLW  00
0C08:  MOVWF  0F
0C09:  BCF    0A.3
0C0A:  BCF    03.6
0C0B:  CALL   21D
0C0C:  BSF    0A.3
....................            delay_ms(2000); 
0C0D:  MOVLW  08
0C0E:  MOVWF  3A
0C0F:  MOVLW  FA
0C10:  MOVWF  3F
0C11:  BCF    0A.3
0C12:  CALL   0C6
0C13:  BSF    0A.3
0C14:  DECFSZ 3A,F
0C15:  GOTO   40F
....................            lcd_putc('\f'); 
0C16:  MOVLW  0C
0C17:  MOVWF  3D
0C18:  BCF    0A.3
0C19:  CALL   1F1
0C1A:  BSF    0A.3
....................            lcd_putc("Nhap mat khau"); 
0C1B:  MOVLW  8E
0C1C:  BSF    03.6
0C1D:  MOVWF  0D
0C1E:  MOVLW  00
0C1F:  MOVWF  0F
0C20:  BCF    0A.3
0C21:  BCF    03.6
0C22:  CALL   21D
0C23:  BSF    0A.3
....................            sai++; 
0C24:  INCF   22,F
....................            count=0; 
0C25:  CLRF   23
....................            a=0; 
0C26:  CLRF   21
....................          } 
....................          } 
....................       } 
....................       if(count==1 && solan==1 && phim==15) 
0C27:  DECFSZ 23,W
0C28:  GOTO   463
0C29:  DECFSZ 25,W
0C2A:  GOTO   463
0C2B:  MOVF   38,W
0C2C:  SUBLW  0F
0C2D:  BTFSS  03.2
0C2E:  GOTO   463
....................       { 
....................          delay_ms(5); 
0C2F:  MOVLW  05
0C30:  MOVWF  3F
0C31:  BCF    0A.3
0C32:  CALL   0C6
0C33:  BSF    0A.3
....................          if(count==1 && solan==1 && phim==15) 
0C34:  DECFSZ 23,W
0C35:  GOTO   463
0C36:  DECFSZ 25,W
0C37:  GOTO   463
0C38:  MOVF   38,W
0C39:  SUBLW  0F
0C3A:  BTFSS  03.2
0C3B:  GOTO   463
....................          { 
....................             lcd_putc('\f'); 
0C3C:  MOVLW  0C
0C3D:  MOVWF  3D
0C3E:  BCF    0A.3
0C3F:  CALL   1F1
0C40:  BSF    0A.3
....................             lcd_gotoxy(1,1); 
0C41:  MOVLW  01
0C42:  MOVWF  3E
0C43:  MOVWF  3F
0C44:  BCF    0A.3
0C45:  CALL   1DF
0C46:  BSF    0A.3
....................             lcd_putc("Mat khau moi"); 
0C47:  MOVLW  95
0C48:  BSF    03.6
0C49:  MOVWF  0D
0C4A:  MOVLW  00
0C4B:  MOVWF  0F
0C4C:  BCF    0A.3
0C4D:  BCF    03.6
0C4E:  CALL   21D
0C4F:  BSF    0A.3
....................             lcd_gotoxy(1,2); 
0C50:  MOVLW  01
0C51:  MOVWF  3E
0C52:  MOVLW  02
0C53:  MOVWF  3F
0C54:  BCF    0A.3
0C55:  CALL   1DF
0C56:  BSF    0A.3
....................             lcd_putc("Lan2:"); 
0C57:  MOVLW  9C
0C58:  BSF    03.6
0C59:  MOVWF  0D
0C5A:  MOVLW  00
0C5B:  MOVWF  0F
0C5C:  BCF    0A.3
0C5D:  BCF    03.6
0C5E:  CALL   21D
0C5F:  BSF    0A.3
....................             solan++; 
0C60:  INCF   25,F
....................             count=0; 
0C61:  CLRF   23
....................             a=0; 
0C62:  CLRF   21
....................          } 
....................       } 
....................       if(solan==1 && count==1) 
0C63:  DECFSZ 25,W
0C64:  GOTO   473
0C65:  DECFSZ 23,W
0C66:  GOTO   473
....................       { 
....................          new1[0]=mk[0]; 
0C67:  MOVF   26,W
0C68:  MOVWF  2C
....................          new1[1]=mk[1]; 
0C69:  MOVF   27,W
0C6A:  MOVWF  2D
....................          new1[2]=mk[2]; 
0C6B:  MOVF   28,W
0C6C:  MOVWF  2E
....................          new1[3]=mk[3]; 
0C6D:  MOVF   29,W
0C6E:  MOVWF  2F
....................          new1[4]=mk[4]; 
0C6F:  MOVF   2A,W
0C70:  MOVWF  30
....................          new1[5]=mk[5]; 
0C71:  MOVF   2B,W
0C72:  MOVWF  31
....................       } 
....................       if(solan==2 && count==1) 
0C73:  MOVF   25,W
0C74:  SUBLW  02
0C75:  BTFSS  03.2
0C76:  GOTO   485
0C77:  DECFSZ 23,W
0C78:  GOTO   485
....................       { 
....................          new2[0]=mk[0]; 
0C79:  MOVF   26,W
0C7A:  MOVWF  32
....................          new2[1]=mk[1]; 
0C7B:  MOVF   27,W
0C7C:  MOVWF  33
....................          new2[2]=mk[2]; 
0C7D:  MOVF   28,W
0C7E:  MOVWF  34
....................          new2[3]=mk[3]; 
0C7F:  MOVF   29,W
0C80:  MOVWF  35
....................          new2[4]=mk[4]; 
0C81:  MOVF   2A,W
0C82:  MOVWF  36
....................          new2[5]=mk[5]; 
0C83:  MOVF   2B,W
0C84:  MOVWF  37
....................       } 
....................       if(solan==2 && count==1 && phim==15) 
0C85:  MOVF   25,W
0C86:  SUBLW  02
0C87:  BTFSS  03.2
0C88:  GOTO   551
0C89:  DECFSZ 23,W
0C8A:  GOTO   551
0C8B:  MOVF   38,W
0C8C:  SUBLW  0F
0C8D:  BTFSS  03.2
0C8E:  GOTO   551
....................       { 
....................          delay_ms(5); 
0C8F:  MOVLW  05
0C90:  MOVWF  3F
0C91:  BCF    0A.3
0C92:  CALL   0C6
0C93:  BSF    0A.3
....................          if(solan==2 && count==1 && phim==15) 
0C94:  MOVF   25,W
0C95:  SUBLW  02
0C96:  BTFSS  03.2
0C97:  GOTO   551
0C98:  DECFSZ 23,W
0C99:  GOTO   551
0C9A:  MOVF   38,W
0C9B:  SUBLW  0F
0C9C:  BTFSS  03.2
0C9D:  GOTO   551
....................          { 
....................          if(new1[0]==new2[0] && new1[1]==new2[1] && new1[2]==new2[2] && new1[3]==new2[3] && new1[4]==new2[4] && new1[5]==new2[5]) 
0C9E:  MOVF   32,W
0C9F:  SUBWF  2C,W
0CA0:  BTFSS  03.2
0CA1:  GOTO   517
0CA2:  MOVF   33,W
0CA3:  SUBWF  2D,W
0CA4:  BTFSS  03.2
0CA5:  GOTO   517
0CA6:  MOVF   34,W
0CA7:  SUBWF  2E,W
0CA8:  BTFSS  03.2
0CA9:  GOTO   517
0CAA:  MOVF   35,W
0CAB:  SUBWF  2F,W
0CAC:  BTFSS  03.2
0CAD:  GOTO   517
0CAE:  MOVF   36,W
0CAF:  SUBWF  30,W
0CB0:  BTFSS  03.2
0CB1:  GOTO   517
0CB2:  MOVF   37,W
0CB3:  SUBWF  31,W
0CB4:  BTFSS  03.2
0CB5:  GOTO   517
....................          { 
....................             lcd_putc('\f'); 
0CB6:  MOVLW  0C
0CB7:  MOVWF  3D
0CB8:  BCF    0A.3
0CB9:  CALL   1F1
0CBA:  BSF    0A.3
....................             lcd_putc("Doi mat khau"); 
0CBB:  MOVLW  9F
0CBC:  BSF    03.6
0CBD:  MOVWF  0D
0CBE:  MOVLW  00
0CBF:  MOVWF  0F
0CC0:  BCF    0A.3
0CC1:  BCF    03.6
0CC2:  CALL   21D
0CC3:  BSF    0A.3
....................             lcd_gotoxy(7,2); 
0CC4:  MOVLW  07
0CC5:  MOVWF  3E
0CC6:  MOVLW  02
0CC7:  MOVWF  3F
0CC8:  BCF    0A.3
0CC9:  CALL   1DF
0CCA:  BSF    0A.3
....................             lcd_putc("thanh cong"); 
0CCB:  MOVLW  A6
0CCC:  BSF    03.6
0CCD:  MOVWF  0D
0CCE:  MOVLW  00
0CCF:  MOVWF  0F
0CD0:  BCF    0A.3
0CD1:  BCF    03.6
0CD2:  CALL   21D
0CD3:  BSF    0A.3
....................             for(int k=0;k<=5;k++) 
0CD4:  CLRF   39
0CD5:  MOVF   39,W
0CD6:  SUBLW  05
0CD7:  BTFSS  03.0
0CD8:  GOTO   4FA
....................             { 
....................                write_eeprom(0x00+k,new1[k]); 
0CD9:  MOVLW  2C
0CDA:  ADDWF  39,W
0CDB:  MOVWF  04
0CDC:  BCF    03.7
0CDD:  MOVF   00,W
0CDE:  MOVWF  3A
0CDF:  MOVF   0B,W
0CE0:  MOVWF  77
0CE1:  BCF    0B.7
0CE2:  MOVF   39,W
0CE3:  BSF    03.6
0CE4:  MOVWF  0D
0CE5:  BCF    03.6
0CE6:  MOVF   3A,W
0CE7:  BSF    03.6
0CE8:  MOVWF  0C
0CE9:  BSF    03.5
0CEA:  BCF    0C.7
0CEB:  BSF    0C.2
0CEC:  MOVLW  55
0CED:  MOVWF  0D
0CEE:  MOVLW  AA
0CEF:  MOVWF  0D
0CF0:  BSF    0C.1
0CF1:  BTFSC  0C.1
0CF2:  GOTO   4F1
0CF3:  BCF    0C.2
0CF4:  MOVF   77,W
0CF5:  BCF    03.5
0CF6:  BCF    03.6
0CF7:  IORWF  0B,F
0CF8:  INCF   39,F
0CF9:  GOTO   4D5
....................             } 
....................             delay_ms(2000); 
0CFA:  MOVLW  08
0CFB:  MOVWF  3A
0CFC:  MOVLW  FA
0CFD:  MOVWF  3F
0CFE:  BCF    0A.3
0CFF:  CALL   0C6
0D00:  BSF    0A.3
0D01:  DECFSZ 3A,F
0D02:  GOTO   4FC
....................             lcd_putc('\f'); 
0D03:  MOVLW  0C
0D04:  MOVWF  3D
0D05:  BCF    0A.3
0D06:  CALL   1F1
0D07:  BSF    0A.3
....................             lcd_putc("Nhap mat khau"); 
0D08:  MOVLW  AC
0D09:  BSF    03.6
0D0A:  MOVWF  0D
0D0B:  MOVLW  00
0D0C:  MOVWF  0F
0D0D:  BCF    0A.3
0D0E:  BCF    03.6
0D0F:  CALL   21D
0D10:  BSF    0A.3
....................             a=0; 
0D11:  CLRF   21
....................             count=0; 
0D12:  CLRF   23
....................             dmk=0; 
0D13:  CLRF   24
....................             solan=0; 
0D14:  CLRF   25
....................             sai=0; 
0D15:  CLRF   22
....................          } 
0D16:  GOTO   551
....................          else 
....................          { 
....................             lcd_putc('\f'); 
0D17:  MOVLW  0C
0D18:  MOVWF  3D
0D19:  BCF    0A.3
0D1A:  CALL   1F1
0D1B:  BSF    0A.3
....................             lcd_putc("Doi mat khau"); 
0D1C:  MOVLW  B3
0D1D:  BSF    03.6
0D1E:  MOVWF  0D
0D1F:  MOVLW  00
0D20:  MOVWF  0F
0D21:  BCF    0A.3
0D22:  BCF    03.6
0D23:  CALL   21D
0D24:  BSF    0A.3
....................             lcd_gotoxy(9,2); 
0D25:  MOVLW  09
0D26:  MOVWF  3E
0D27:  MOVLW  02
0D28:  MOVWF  3F
0D29:  BCF    0A.3
0D2A:  CALL   1DF
0D2B:  BSF    0A.3
....................             lcd_putc("that bai"); 
0D2C:  MOVLW  BA
0D2D:  BSF    03.6
0D2E:  MOVWF  0D
0D2F:  MOVLW  00
0D30:  MOVWF  0F
0D31:  BCF    0A.3
0D32:  BCF    03.6
0D33:  CALL   21D
0D34:  BSF    0A.3
....................             delay_ms(2000);\ 
0D35:  MOVLW  08
0D36:  MOVWF  3A
0D37:  MOVLW  FA
0D38:  MOVWF  3F
0D39:  BCF    0A.3
0D3A:  CALL   0C6
0D3B:  BSF    0A.3
0D3C:  DECFSZ 3A,F
0D3D:  GOTO   537
....................             lcd_putc('\f'); 
0D3E:  MOVLW  0C
0D3F:  MOVWF  3D
0D40:  BCF    0A.3
0D41:  CALL   1F1
0D42:  BSF    0A.3
....................             lcd_putc("Nhap mat khau"); 
0D43:  MOVLW  BF
0D44:  BSF    03.6
0D45:  MOVWF  0D
0D46:  MOVLW  00
0D47:  MOVWF  0F
0D48:  BCF    0A.3
0D49:  BCF    03.6
0D4A:  CALL   21D
0D4B:  BSF    0A.3
....................             a=0; 
0D4C:  CLRF   21
....................             count=0; 
0D4D:  CLRF   23
....................             dmk=0; 
0D4E:  CLRF   24
....................             solan=0; 
0D4F:  CLRF   25
....................             sai=0; 
0D50:  CLRF   22
....................          } 
....................          } 
....................       } 
0D51:  GOTO   039
....................    } 
....................  } 
0D52:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
